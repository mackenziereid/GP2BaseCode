#include "Common.h"
#include "Graphics.h"
#include "Vertex.h"

float xpos = 0;
float ypos = 0;

Vertex verts[] = {
    //front
    {-0.5f, 0.5f, 0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //top left
    
    {-0.5f, -0.5f, 0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //bottom left
    
    {0.5f, -0.5f, 0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //bottom right
    
    {0.5f, 0.5f, 0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //top right
    
    
    //back
    {-0.5f, 0.5f, -0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //top left
    
    {-0.5f, -0.5f, -0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //bottom left
    
    {0.5f, -0.5f, -0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //bottom right
    
    {0.5f, 0.5f, -0.5f,
    1.0f, 1.0f, 1.0f, 1.0f}, //top right
    
    
    
};

GLuint indices[] = {
    //front
    0,1,2,
    0,3,2,
    
    //left
    4,5,1,
    4,1,0,
    
    //right
    3,7,2,
    7,6,2,
    
    //bottom
    1,5,2,
    6,2,5,
    
    //top
    4,0,7,
    0,7,3,
    
    //back
    4,5,6,
    4,7,6
};


GLuint VBO;
GLuint EBO;

void render()
{
    //set the clear color(background)
    glClearColor(0.3f, 0.3f, 0.3f, 1.0f);
    //clear the color and depth buffer
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    
    //make the new VBO active. Repeat here as a sanity check(may have changes since initialisation)
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    
    //the 3 parameters is now filled out, the pipeline needs to know the size of each vertex
    glVertexPointer(3, GL_FLOAT, sizeof(Vertex), NULL);
    
    //the last parameter basically says that the colors start 3 floats into each array element
    glColorPointer(4, GL_FLOAT, sizeof(Vertex), (void**)(3*sizeof(float)));
    
    //establish array contains vertices (not normals, colors, texture coords etc)
    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);
    
    //switch to modelview
    glMatrixMode(GL_MODELVIEW);
    //reset using identity matrix
    glLoadIdentity();
    
    gluLookAt(0.0, 0.0, 6.0, 0.0, 0.0, -1.0f, 0.0, 1.0, 0.0);
    
    //translate
    glTranslatef(xpos, ypos, 0.0f);    //actually draw the triangle giving the number of vertices provided
    glDrawElements(GL_TRIANGLES, sizeof(indices) /sizeof(GLuint), GL_UNSIGNED_INT, 0);

    
    
//    //switch to modelview
//    glMatrixMode(GL_MODELVIEW);
//    //reset using the identity matrix
//    glLoadIdentity();
//    //Translate to -5.0f on the z axis
//    glTranslatef(0.0f, 0.0f, -5.0f);
//    //Begin drawing triangles
//    glBegin(GL_TRIANGLES);
//    glColor3f(1.0f, 0.0f, 0.0f);
//    glVertex3f(-1.0f, 1.0f, 0.0f);
//    glColor3f(1.0f, 1.0f, 0.0f);
//    glVertex3f(-1.0f, -1.0f, 0.0f);
//    glColor3f(1.0f, 0.0f, 1.0f);
//    glVertex3f(1.0f, -1.0f, 0.0f);
//    glEnd();
    
}

void update()
{
    
}

void initScene()
{
    //create buffer
    glGenBuffers(1, &VBO);
    //make the new vbo active
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //copy vertex data to VBO
    glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);
    
    //create buffers
    glGenBuffers(1, &EBO);
    //make the EBO active
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    //copy index data to the EBO
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
}

void cleanUp()
{
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);
}


int main(int argc, char * arg[])
{
    
    bool run = true;
    
    //init everything - SDL, if it it non zero we have a problem
    if(SDL_Init(SDL_INIT_EVERYTHING) != 0)
    {
        std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;
        
        return -1;
    }
    
    SDL_Window * window = SDL_CreateWindow("SDL", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480,
                                           SDL_WINDOW_OPENGL);
    
    //create an OpenGL context associated with the window
    SDL_GLContext glContext = SDL_GL_CreateContext(window);
    
    //Initiize
    //Call out InitOpenGLFunction
    initOpenGL();
    initScene();
    
    //set our viewport
    setViewport(640, 480);
    
    //Value to hold the event generated by SDL
    SDL_Event event;
    //Game Loop
    while (run)
    {
        
        while (SDL_PollEvent(&event))
        {
            
            //Get event type
            if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE)
            {
                //set our bool which controls the loop to false
                run = false;
            }
            
            if(event.type == SDL_KEYDOWN)
            {
                
            }
            
        }
        
        
        update();
        render();
        
        //Call swap so that out GL back buffer is displayed
        SDL_GL_SwapWindow(window);
        
    }
    
    //clean up reverse order
    cleanUp();
    SDL_GL_DeleteContext(glContext);
    SDL_DestroyWindow(window);
    SDL_Quit();
    
    return 0;
}
