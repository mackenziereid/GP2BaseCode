#include "Common.h"
#include "Graphics.h"
#include "Vertex.h"
#include "Shader.h"

float xpos = 0;
float ypos = 0;

GLuint shaderProgram = 0;

Vertex verts[] = {
    //front
    {vec3{-0.5f, 0.5f, 0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //top left
    
    {vec3{-0.5f, -0.5f, 0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //bottom left
    
    {vec3{0.5f, -0.5f, 0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //bottom right
    
    {vec3{0.5f, 0.5f, 0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //top right
    
    
    //back
    {vec3{-0.5f, 0.5f, -0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //top left
    
    {vec3{-0.5f, -0.5f, -0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //bottom left
    
    {vec3{0.5f, -0.5f, -0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //bottom right
    
    {vec3{0.5f, 0.5f, -0.5f},
    vec4{1.0f, 1.0f, 1.0f, 1.0f}}, //top right
    
    
    
};

GLuint indices[] = {
    //front
    0,1,2,
    0,3,2,
    
    //left
    4,5,1,
    4,1,0,
    
    //right
    3,7,2,
    7,6,2,
    
    //bottom
    1,5,2,
    6,2,5,
    
    //top
    4,0,7,
    0,7,3,
    
    //back
    4,5,6,
    4,7,6
};


//matrices
mat4 viewMatrix;
mat4 projMatrix;
mat4 worldMatrix;
mat4 MVPMatrix;

GLuint VAO;
GLuint VBO;
GLuint EBO;

void render()
{
    //set the clear color(background)
    glClearColor(0.3f, 0.3f, 0.3f, 1.0f);
    //clear the color and depth buffer
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    glUseProgram(shaderProgram);
    
    glBindVertexArray(VAO);
    
    GLint MVPLoaction = glGetUniformLocation(shaderProgram, "MVP");
    glUniformMatrix4fv(MVPLoaction, 1, GL_FALSE, glm::value_ptr(MVPMatrix));

    glDrawElements(GL_TRIANGLES, sizeof(indices) /sizeof(GLuint), GL_UNSIGNED_INT, 0);
    
}

void update()
{
    projMatrix = perspective(45.0f, 640.0f / 480.0f, 0.1f, 100.0f);
    
    viewMatrix = lookAt(vec3(0.0f, 0.0f, 10.0f), vec3(0.0f,0.0f,0.0f), vec3(0.0f, 1.0f, 0.0f));
    
    worldMatrix = translate(mat4(1.0f), vec3(0.0f, 0.0f, 0.0f));
    
    MVPMatrix = projMatrix*viewMatrix*worldMatrix;
}

void initScene()
{
    
    glGenVertexArrays(1, &VAO);
    glBindVertexArray(VAO);
    
    
    //create buffer
    glGenBuffers(1, &VBO);
    //make the new vbo active
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    //copy vertex data to VBO
    glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);
    
    //create buffers
    glGenBuffers(1, &EBO);
    //make the EBO active
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    //copy index data to the EBO
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
    
    //load and complile vertex shader
    GLuint vertexShaderProgram = 0;
    string vsPath = ASSET_PATH + SHADER_PATH + "/simpleVS.glsl";
    vertexShaderProgram = loadShaderFromFile(vsPath, VERTEX_SHADER);
    checkForCompilerErrors(vertexShaderProgram);
    
    //load and compile fragment shader
    GLuint fragmentShaderProgram = 0;
    string fsPath = ASSET_PATH + SHADER_PATH + "/simpleFS.glsl";
    fragmentShaderProgram = loadShaderFromFile(fsPath, FRAGMENT_SHADER);
    checkForCompilerErrors(fragmentShaderProgram);
    
    //tell the shader that 0 is the position element
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), NULL);
    
    //link and attach shaders
    shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShaderProgram);
    glAttachShader(shaderProgram, fragmentShaderProgram);
    glLinkProgram(shaderProgram);
    checkForLinkErrors(shaderProgram);
    
    glBindAttribLocation(shaderProgram, 0, "vertexPosition");
    
    //now we can delete the VS & FS program
    glDeleteShader(vertexShaderProgram);
    glDeleteShader(fragmentShaderProgram);
    
    
}

void cleanUp()
{
    glDeleteProgram(shaderProgram);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);
    glDeleteVertexArrays(1, &VAO);
}


int main(int argc, char * arg[])
{
    
    bool run = true;
    
    //init everything - SDL, if it it non zero we have a problem
    if(SDL_Init(SDL_INIT_EVERYTHING) != 0)
    {
        std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;
        
        return -1;
    }
    
    //ask for version 4.2 of OpenGL
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    
    SDL_Window * window = SDL_CreateWindow("SDL", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480,
                                           SDL_WINDOW_OPENGL);
    
    
    //create an OpenGL context associated with the window
    SDL_GLContext glContext = SDL_GL_CreateContext(window);
    
    //Initiize
    //Call out InitOpenGLFunction
    initOpenGL();
    initScene();
    
    //set our viewport
    setViewport(640, 480);
    
    //Value to hold the event generated by SDL
    SDL_Event event;
    //Game Loop
    while (run)
    {
        
        while (SDL_PollEvent(&event))
        {
            
            //Get event type
            if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE)
            {
                //set our bool which controls the loop to false
                run = false;
            }
            
            if(event.type == SDL_KEYDOWN)
            {
                if (event.key.keysym.sym == SDLK_UP) {
                    ypos += 0.2f;
                }
                if (event.key.keysym.sym == SDLK_DOWN) {
                    ypos -= 0.2f;
                }
                if (event.key.keysym.sym == SDLK_LEFT) {
                    xpos -= 0.2f;
                }
                if (event.key.keysym.sym == SDLK_RIGHT) {
                    xpos += 0.2f;
                }
            }
            
        }
        
        
        update();
        render();
        
        //Call swap so that out GL back buffer is displayed
        SDL_GL_SwapWindow(window);
        
    }
    
    //clean up reverse order
    cleanUp();
    SDL_GL_DeleteContext(glContext);
    SDL_DestroyWindow(window);
    SDL_Quit();
    
    return 0;
}
